#!/usr/bin/env python3
"""
Verification script to ensure the temporal-worker setup is correct.
Run with: uv run verify_setup.py
"""

import asyncio
import sys
from pathlib import Path

async def main():
    print("üöÄ Verifying temporal-worker setup...")
    print("=" * 50)
    
    # Test 1: Basic imports
    try:
        from src.tools.arxiv_client_mcp import (
            ArxivMCPServerClient, 
            ensure_mcp_server_available,
            arxiv_search_papers,
            arxiv_download_paper,
            arxiv_deep_analysis
        )
        print("‚úÖ All MCP client imports successful")
    except Exception as e:
        print(f"‚ùå Import failed: {e}")
        return False
    
    # Test 2: Tool registry
    try:
        from src.tools.registry import get_available_tools, TOOL_REGISTRY
        tools = await get_available_tools()
        expected_tools = [
            "arxiv_search_papers", "arxiv_download_paper", 
            "arxiv_list_papers", "arxiv_read_paper", 
            "arxiv_get_metadata", "arxiv_deep_analysis"
        ]
        
        for tool in expected_tools:
            if tool not in tools:
                print(f"‚ùå Missing tool: {tool}")
                return False
        
        print(f"‚úÖ Tool registry working ({len(tools)} tools available)")
        print(f"   Including: {', '.join(expected_tools)}")
    except Exception as e:
        print(f"‚ùå Tool registry failed: {e}")
        return False
    
    # Test 3: MCP server availability
    try:
        result = await ensure_mcp_server_available()
        print("‚úÖ arxiv-mcp-server is available")
    except Exception as e:
        print(f"‚ùå MCP server check failed: {e}")
        print("   Make sure you ran: uv tool install arxiv-mcp-server")
        return False
    
    # Test 4: Activity imports
    try:
        from src.activities.dynamic_tool_activity import dynamic_tool_activity
        from src.activities.tool_registry_activities import get_tool_descriptions
        print("‚úÖ Activity imports successful")
    except Exception as e:
        print(f"‚ùå Activity import failed: {e}")
        return False
    
    # Test 5: Configuration
    try:
        from src.config.arxiv_config import ArxivConfig
        print("‚úÖ Configuration imports successful")
    except Exception as e:
        print(f"‚ùå Configuration import failed: {e}")
        return False
    
    print("\nüéâ All verification checks passed!")
    print("\nüìã Setup Summary:")
    print("   ‚Ä¢ Python version: 3.11+")
    print("   ‚Ä¢ Dependencies: Installed via uv")
    print("   ‚Ä¢ arxiv-mcp-server: Available as tool")
    print("   ‚Ä¢ MCP client: Consolidated and working")
    print("   ‚Ä¢ Tool registry: All arXiv tools available")
    print("   ‚Ä¢ Deep analysis: Available via MCP server")
    
    print("\nüö¶ Ready to run:")
    print("   ‚Ä¢ uv run pytest  # Run tests")
    print("   ‚Ä¢ uv run python src/worker.py  # Start worker")
    print("   ‚Ä¢ uv tool run arxiv-mcp-server  # Test MCP server directly")
    
    return True

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)