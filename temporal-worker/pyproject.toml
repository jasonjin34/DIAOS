[project]
name = "research-agent-worker"
version = "0.1.0"
description = "Temporal worker for durable AI research agent"
requires-python = ">=3.11"
dependencies = [
    "temporalio>=1.4.0",
    "pdfplumber>=0.10.0",
    "openai>=1.35.0",
    "requests>=2.31.0",
    "nltk>=3.8.1",
    "scikit-learn>=1.3.0",
    "numpy>=1.24.0",
    "python-dotenv>=1.0.0",
    "aiohttp>=3.9.0",
    "jinja2>=3.1.0",
    "pydantic>=2.5.0",
    "mcp>=1.0.0",
    "arxiv>=2.1.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.0.0",
    "httpx>=0.25.0",
    "freezegun>=1.2.0",
    "responses>=0.23.0",
]
all = [
    "research-agent-worker[dev,test]",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[project.scripts]
worker = "src.worker:cli_main"

[tool.black]
line-length = 88
target-version = ['py311']

[tool.isort]
profile = "black"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=20",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (slower, real APIs)",
    "slow: Slow tests that may take time",
    "openai: Tests that require OpenAI API",
    "arxiv: Tests that require arXiv API",
    "temporal: Tests that require Temporal server",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "src/worker.py",  # Entry point, tested via integration
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
